// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Long running operation resource for person directory.
 */
@Immutable
public final class FaceOperationStatus implements JsonSerializable<FaceOperationStatus> {
    /*
     * Operation ID of the operation.
     */
    @Generated
    private String operationId;

    /*
     * Current status of the operation.
     */
    @Generated
    private final FaceOperationState status;

    /*
     * Date and time the operation was created.
     */
    @Generated
    private final OffsetDateTime createdDateTime;

    /*
     * Date and time the operation was finished.
     */
    @Generated
    private OffsetDateTime finishedDateTime;

    /*
     * Message for the operation.
     */
    @Generated
    private String message;

    /**
     * Creates an instance of FaceOperationStatus class.
     * 
     * @param status the status value to set.
     * @param createdDateTime the createdDateTime value to set.
     */
    @Generated
    private FaceOperationStatus(FaceOperationState status, OffsetDateTime createdDateTime) {
        this.status = status;
        this.createdDateTime = createdDateTime;
    }

    /**
     * Get the operationId property: Operation ID of the operation.
     * 
     * @return the operationId value.
     */
    @Generated
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the status property: Current status of the operation.
     * 
     * @return the status value.
     */
    @Generated
    public FaceOperationState getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: Date and time the operation was created.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the finishedDateTime property: Date and time the operation was finished.
     * 
     * @return the finishedDateTime value.
     */
    @Generated
    public OffsetDateTime getFinishedDateTime() {
        return this.finishedDateTime;
    }

    /**
     * Get the message property: Message for the operation.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("finishedDateTime",
            this.finishedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.finishedDateTime));
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaceOperationStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaceOperationStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaceOperationStatus.
     */
    @Generated
    public static FaceOperationStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String operationId = null;
            FaceOperationState status = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime finishedDateTime = null;
            String message = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = FaceOperationState.fromString(reader.getString());
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("finishedDateTime".equals(fieldName)) {
                    finishedDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FaceOperationStatus deserializedFaceOperationStatus = new FaceOperationStatus(status, createdDateTime);
            deserializedFaceOperationStatus.operationId = operationId;
            deserializedFaceOperationStatus.finishedDateTime = finishedDateTime;
            deserializedFaceOperationStatus.message = message;

            return deserializedFaceOperationStatus;
        });
    }
}
